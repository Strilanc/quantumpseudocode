import cirq

import quantumpseudocode as qp


def test_let_unary_circuit():
    with qp.Sim():
        with qp.LogCirqCircuit() as circuit:
            with qp.qmanaged_int(bits=3, name='b') as b:
                with qp.qmanaged_int(bits=8, name='u') as u:
                    with qp.qmanaged(qp.Qubit(name='_c')) as c:
                        u.init(1 << b, c)

    cirq.testing.assert_has_diagram(circuit, r"""
_c: -----@-----------------------------------------------------------
         |
b[0]: ---|---@-------------------------------------------------------
         |   |
b[1]: ---|---|-------@-------@---------------------------------------
         |   |       |       |
b[2]: ---|---|-------|-------|-------@-------@-------@-------@-------
         |   |       |       |       |       |       |       |
u[0]: ---X---@---X---@---X---|-------@---X---|-------|-------|-------
             |   |   |   |   |       |   |   |       |       |
u[1]: -------X---@---|---|---@---X---|---|---@---X---|-------|-------
                     |   |   |   |   |   |   |   |   |       |
u[2]: ---------------X---@---|---|---|---|---|---|---@---X---|-------
                             |   |   |   |   |   |   |   |   |
u[3]: -----------------------X---@---|---|---|---|---|---|---@---X---
                                     |   |   |   |   |   |   |   |
u[4]: -------------------------------X---@---|---|---|---|---|---|---
                                             |   |   |   |   |   |
u[5]: ---------------------------------------X---@---|---|---|---|---
                                                     |   |   |   |
u[6]: -----------------------------------------------X---@---|---|---
                                                             |   |
u[7]: -------------------------------------------------------X---@---
        """, use_unicode_characters=False)


def test_xor_unary_circuit():
    with qp.Sim(phase_fixup_bias=True):
        with qp.LogCirqCircuit() as circuit:
            with qp.qmanaged_int(bits=3, name='b') as b:
                with qp.qmanaged_int(bits=8, name='u') as u:
                    with qp.qmanaged(qp.Qubit(name='_c')) as c:
                        with qp.controlled_by(c):
                            u ^= 1 << b

    cirq.testing.assert_has_diagram(circuit, r"""
_c: -----------------@---@-------------------------------------------------------------------------------------@-------------------------------------------------------------------------------------------@---
                     |   |                                                                                     |                                                                                           |
_lookup_prefix: -----X---X---@---@---------------------------------@---------------------------------------@---X---@---@---------------------------------@---------------------------------------@---Mxc---|---
                     |       |   |                                 |                                       |       |   |                                 |                                       |         |
_lookup_prefix_1: ---|-------X---X---@---@-------@-------------@---X---@---@-------@-------------@---Mxc---|-------X---X---@---@-------@-------------@---X---@---@-------@-------------@---Mxc---|---------|---
                     |       |       |   |       |             |       |   |       |             |         |       |       |   |       |             |       |   |       |             |         |         |
_lookup_prefix_2: ---|-------|-------X---X---@---X---@---Mxc---|-------X---X---@---X---@---Mxc---|---------|-------|-------X---X---@---X---@---Mxc---|-------X---X---@---X---@---Mxc---|---------|---------|---
                     |       |       |       |       |         |       |       |       |         |         |       |       |       |       |         |       |       |       |         |         |         |
b[0]: ---------------|-------|-------@-------|-------|---------Z-------@-------|-------|---------Z---------|-------|-------@-------|-------|---------Z-------@-------|-------|---------Z---------|---------|---
                     |       |               |       |                         |       |                   |       |               |       |                         |       |                   |         |
b[1]: ---------------|-------@---------------|-------|-------------------------|-------|-------------------Z-------@---------------|-------|-------------------------|-------|-------------------Z---------|---
                     |                       |       |                         |       |                                           |       |                         |       |                             |
b[2]: ---------------@-----------------------|-------|-------------------------|-------|-------------------------------------------|-------|-------------------------|-------|-----------------------------Z---
                                             |       |                         |       |                                           |       |                         |       |
u[0]: ---------------------------------------X-------|-------------------------|-------|-------------------------------------------|-------|-------------------------|-------|---------------------------------
                                                     |                         |       |                                           |       |                         |       |
u[1]: -----------------------------------------------X-------------------------|-------|-------------------------------------------|-------|-------------------------|-------|---------------------------------
                                                                               |       |                                           |       |                         |       |
u[2]: -------------------------------------------------------------------------X-------|-------------------------------------------|-------|-------------------------|-------|---------------------------------
                                                                                       |                                           |       |                         |       |
u[3]: ---------------------------------------------------------------------------------X-------------------------------------------|-------|-------------------------|-------|---------------------------------
                                                                                                                                   |       |                         |       |
u[4]: -----------------------------------------------------------------------------------------------------------------------------X-------|-------------------------|-------|---------------------------------
                                                                                                                                           |                         |       |
u[5]: -------------------------------------------------------------------------------------------------------------------------------------X-------------------------|-------|---------------------------------
                                                                                                                                                                     |       |
u[6]: ---------------------------------------------------------------------------------------------------------------------------------------------------------------X-------|---------------------------------
                                                                                                                                                                             |
u[7]: -----------------------------------------------------------------------------------------------------------------------------------------------------------------------X---------------------------------
        """, use_unicode_characters=False)


def test_del_unary_circuit():
    with qp.Sim(phase_fixup_bias=True):
        with qp.LogCirqCircuit() as circuit:
            with qp.qmanaged_int(bits=3, name='b') as b:
                with qp.qmanaged_int(bits=8, name='u') as u:
                    with qp.qmanaged(qp.Qubit(name='_c')) as c:
                        u.clear(1 << b, c)

    cirq.testing.assert_has_diagram(circuit, r"""
_c: -------------------------------------------------------------------------------------------------------------Z---

b[0]: -------------------------------------------------------------------------------------------------Z-------------
                                                                                                       |
b[1]: ---------------------------------------------------------------------Z-------------Z-------------|-------------
                                                                           |             |             |
b[2]: -------------Z-------------Z-------------Z-------------Z-------------|-------------|-------------|-------------
                   |             |             |             |             |             |             |
u[0]: -------------|-------------|-------------|---X---------@-------------|---X---------@---X---------@---Mxc-------
                   |             |             |   |                       |   |             |
u[1]: -------------|-------------|---X---------@---|-------------X---------@---|-------------@---Mxc-----------------
                   |             |   |             |             |             |
u[2]: -------------|---X---------@---|-------------|-------------|-------------@---Mxc-------------------------------
                   |   |             |             |             |
u[3]: ---X---------@---|-------------|-------------|-------------@---Mxc---------------------------------------------
         |             |             |             |
u[4]: ---|-------------|-------------|-------------@---Mxc-----------------------------------------------------------
         |             |             |
u[5]: ---|-------------|-------------@---Mxc-------------------------------------------------------------------------
         |             |
u[6]: ---|-------------@---Mxc---------------------------------------------------------------------------------------
         |
u[7]: ---@---Mxc-----------------------------------------------------------------------------------------------------
        """, use_unicode_characters=False)

    del u
    del b
    del c
    with qp.Sim(phase_fixup_bias=False):
        with qp.LogCirqCircuit() as circuit:
            with qp.qmanaged_int(bits=3, name='b') as b:
                with qp.qmanaged_int(bits=8, name='u') as u:
                    with qp.qmanaged(qp.Qubit(name='_c')) as c:
                        u.clear(1 << b, c)

    cirq.testing.assert_has_diagram(circuit, r"""
u[0]: ---------------------------------X-------------------X---------X---------Mxc---
                                       |                   |         |
u[1]: -----------------------X---------|---------X---------|---------@---Mxc---------
                             |         |         |         |
u[2]: -------------X---------|---------|---------|---------@---Mxc-------------------
                   |         |         |         |
u[3]: ---X---------|---------|---------|---------@---Mxc-----------------------------
         |         |         |         |
u[4]: ---|---------|---------|---------@---Mxc---------------------------------------
         |         |         |
u[5]: ---|---------|---------@---Mxc-------------------------------------------------
         |         |
u[6]: ---|---------@---Mxc-----------------------------------------------------------
         |
u[7]: ---@---Mxc---------------------------------------------------------------------
        """, use_unicode_characters=False)
